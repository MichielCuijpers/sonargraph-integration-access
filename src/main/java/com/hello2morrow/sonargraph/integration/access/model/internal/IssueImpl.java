package com.hello2morrow.sonargraph.integration.access.model.internal;

import com.hello2morrow.sonargraph.integration.access.model.IIssue;
import com.hello2morrow.sonargraph.integration.access.model.IIssueProvider;
import com.hello2morrow.sonargraph.integration.access.model.IIssueType;

public abstract class IssueImpl extends ElementWithDescriptionImpl implements IIssue
{
    private final IIssueType m_issueType;
    private final IIssueProvider m_issueProvider;
    private final boolean m_hasResolution;
    private final int m_lineNumber;

    public IssueImpl(final String name, final String presentationName, final String description, final IIssueType issueType,
            final IIssueProvider provider, final boolean hasResolution, final int line)
    {
        super(name, presentationName, description);
        assert provider != null : "Parameter 'provider' of method 'Issue' must not be null";

        m_issueType = issueType;
        m_issueProvider = provider;
        m_hasResolution = hasResolution;
        m_lineNumber = line;
    }

    /* (non-Javadoc)
     * @see com.hello2morrow.sonargraph.integration.access.model.IIssue#getIssueProvider()
     */
    @Override
    public final IIssueProvider getIssueProvider()
    {
        return m_issueProvider;
    }

    /* (non-Javadoc)
     * @see com.hello2morrow.sonargraph.integration.access.model.IIssue#getIssueType()
     */
    @Override
    public final IIssueType getIssueType()
    {
        return m_issueType;
    }

    /* (non-Javadoc)
     * @see com.hello2morrow.sonargraph.integration.access.model.IIssue#hasResolution()
     */
    @Override
    public final boolean hasResolution()
    {
        return m_hasResolution;
    }

    @Override
    public String toString()
    {
        return m_issueType.toString() + ", generated by " + m_issueProvider.toString() + ": " + getDescription() + ", line " + m_lineNumber
                + ", resolved '" + hasResolution() + "'";
    }

    @Override
    public final int getLineNumber()
    {
        return m_lineNumber;
    }

    @Override
    public int hashCode()
    {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + (m_hasResolution ? 1231 : 1237);
        result = prime * result + ((m_issueProvider == null) ? 0 : m_issueProvider.hashCode());
        result = prime * result + ((m_issueType == null) ? 0 : m_issueType.hashCode());
        result = prime * result + m_lineNumber;
        return result;
    }

    @Override
    public boolean equals(final Object obj)
    {
        if (this == obj)
        {
            return true;
        }
        if(obj == null)
        {
        	return false;
        }
        if (!super.equals(obj))
        {
            return false;
        }
        if (getClass() != obj.getClass())
        {
            return false;
        }
        final IssueImpl other = (IssueImpl) obj;
        if (m_hasResolution != other.m_hasResolution)
        {
            return false;
        }
        if (m_issueProvider == null)
        {
            if (other.m_issueProvider != null)
            {
                return false;
            }
        }
        else if (!m_issueProvider.equals(other.m_issueProvider))
        {
            return false;
        }
        if (m_issueType == null)
        {
            if (other.m_issueType != null)
            {
                return false;
            }
        }
        else if (!m_issueType.equals(other.m_issueType))
        {
            return false;
        }
        if (m_lineNumber != other.m_lineNumber)
        {
            return false;
        }
        return true;
    }
}